var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
export function onHeaderCheckBoxChange(table) {
    if (!table.singleSelect) {
        table.rows = table.rows.map(function (row) {
            return __assign({}, row, { __checked__: table.checkAllRows });
        });
    }
    else if (!table.checkAllRows) {
        table.rows = table.rows.map(function (row) {
            return __assign({}, row, { __checked__: false });
        });
    }
    if (table.checkOnSelect) {
        table.rows = table.rows.map(function (row) {
            if (row.__checked__ != row.__selected__)
                return __assign({}, row, { __selected__: !!row.__checked__ });
            return row;
        });
    }
}
//# sourceMappingURL=row-helpers.js.map