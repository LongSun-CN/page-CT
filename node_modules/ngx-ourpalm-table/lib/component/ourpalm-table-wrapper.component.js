import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation } from "@angular/core";
import { OurpalmTableColumn } from "../model/ourpalm-table-column";
var OurpalmTableWrapperComponent = (function () {
    function OurpalmTableWrapperComponent() {
        this.tableClass = 'table table-bordered table-striped table-hover text-center';
        this.currentPage = 1;
        this.pageSize = 10;
        this.pagination = true;
        this.pageList = [10, 20, 30, 40, 50];
        this.skipPage = true;
        this.pagePosition = 'bottom';
        this.showRefreshBtn = true;
        this.showSettingBtn = true;
        this.openSettings = false;
        this.openSettingsChange = new EventEmitter();
        this.onPagingChange = new EventEmitter();
        this.onPagingRefresh = new EventEmitter();
        this.currentPageChange = new EventEmitter();
        this.pageSizeChange = new EventEmitter();
        this.checkAll = false;
        this.cacheKey = '';
        this.cachePageSize = false;
        this.cacheColumns = false;
        this.singleSelect = false;
        this.checkOnSelect = true;
        this.selectOnCheck = true;
        this.ctrlSelect = false;
        this.rowViewShowType = 'column';
        this.onClickRow = new EventEmitter();
        this.onDbClickRow = new EventEmitter();
        this.onClickCell = new EventEmitter();
        this.onDbClickCell = new EventEmitter();
        this.onRowCheckBoxChange = new EventEmitter();
        this.onHeaderCheckBoxChange = new EventEmitter();
        this.onSortColumn = new EventEmitter();
        this.total = 0;
        this.columnsChange = new EventEmitter();
    }
    Object.defineProperty(OurpalmTableWrapperComponent.prototype, "_columns", {
        set: function (columns) {
            columns = columns || [];
            var __columns = columns.map(function (column) { return Object.assign(column, new OurpalmTableColumn(column)); });
            this.columns = __columns;
        },
        enumerable: true,
        configurable: true
    });
    OurpalmTableWrapperComponent.prototype.onClickRowEvent = function (_a) {
        var row = _a.row, event = _a.event;
        if (this.singleSelect || (!this.singleSelect && this.ctrlSelect && !event.ctrlKey)) {
            this.rows.forEach(function (_row) {
                if (row !== _row) {
                    _row.selected = false;
                }
                else {
                    _row.selected = !_row.selected;
                }
            });
        }
        else {
            row.selected = !row.selected;
        }
        if (this.selectOnCheck) {
            this.rows.forEach(function (row) {
                if (row.checked != row.selected) {
                    row.checked = row.selected;
                }
            });
        }
    };
    OurpalmTableWrapperComponent.prototype.onRowCheckBoxChangeEvent = function (row) {
        if (this.singleSelect && row.checked) {
            this.rows.forEach(function (row) {
                row.checked = false;
            });
            row.checked = true;
        }
        if (this.checkOnSelect) {
            row.selected = row.checked;
        }
        this.onRowCheckBoxChange.emit(row);
    };
    OurpalmTableWrapperComponent.prototype.onHeaderCheckBoxChangeEvent = function (checkAll) {
        if (!this.singleSelect) {
            this.rows = this.rows.map(function (row) {
                row.checked = checkAll;
                return row;
            });
        }
        else if (!this.checkOnSelect) {
            this.rows = this.rows.map(function (row) {
                row.checked = false;
                return row;
            });
        }
        if (this.checkOnSelect) {
            this.rows = this.rows.map(function (row) {
                if (row.checked != row.selected) {
                    row.selected = row.checked;
                }
                return row;
            });
        }
        this.onHeaderCheckBoxChange.emit();
    };
    return OurpalmTableWrapperComponent;
}());
export { OurpalmTableWrapperComponent };
OurpalmTableWrapperComponent.decorators = [
    { type: Component, args: [{
                selector: 'ourpalm-table-wrapper',
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                template: "\n        <table [ngClass]=\"tableClass\">\n            <thead>\n                <tr *ngIf=\"pagination && pagePosition !== 'bottom'\"\n                    ourpalm-table-paging\n                    [currentPage]=\"currentPage\"\n                    (currentPageChange)=\"currentPageChange.emit($event)\"\n                    [pageSize]=\"pageSize\"\n                    (pageSizeChange)=\"pageSizeChange.emit($event)\"\n                    [total]=\"total\"\n                    [rows]=\"rows.length\"\n                    [skipPage]=\"skipPage\"\n                    [pageList]=\"pageList\"\n                    [showRefreshBtn]=\"showRefreshBtn\"\n                    [showSettingBtn]=\"showSettingBtn\"\n                    [openSettings]=\"openSettings\"\n                    (openSettingsChange)=\"openSettingsChange.emit($event)\"\n                    (onChange)=\"onPagingChange.emit($event)\"\n                    (onRefresh)=\"onPagingRefresh.emit($event)\">\n                </tr>\n                <tr ourpalm-table-header\n                    [columns]=\"columns\"\n                    [checkAll]=\"checkAll\"\n                    (checkAllChange)=\"onHeaderCheckBoxChangeEvent($event)\"\n                    (onSortColumn)=\"onSortColumn.emit($event)\">\n                </tr>\n            </thead>\n            <tbody ourpalm-table-body\n                   [columns]=\"columns\"\n                   [rows]=\"rows\"\n                   [rowMenus]=\"rowMenus\"\n                   [rowView]=\"rowView\"\n                   [rowViewShowType]=\"rowViewShowType\"\n                   [rowViewTemplate]=\"rowViewTemplate\"\n                   (onClickRow)=\"onClickRowEvent($event)\"\n                   (onDbClickRow)=\"onDbClickRow.emit($event)\"\n                   (onClickCell)=\"onClickCell.emit($event)\"\n                   (onDbClickCell)=\"onDbClickCell.emit($event)\"\n                   (onRowCheckBoxChange)=\"onRowCheckBoxChangeEvent($event)\">\n            </tbody>\n            <tfoot>\n                <tr *ngIf=\"pagination && pagePosition !== 'top'\"\n                    ourpalm-table-paging\n                    [currentPage]=\"currentPage\"\n                    (currentPageChange)=\"currentPageChange.emit($event)\"\n                    [pageSize]=\"pageSize\"\n                    (pageSizeChange)=\"pageSizeChange.emit($event)\"\n                    [total]=\"total\"\n                    [rows]=\"rows.length\"\n                    [skipPage]=\"skipPage\"\n                    [pageList]=\"pageList\"\n                    [showRefreshBtn]=\"showRefreshBtn\"\n                    [showSettingBtn]=\"showSettingBtn\"\n                    [openSettings]=\"openSettings\"\n                    (openSettingsChange)=\"openSettingsChange.emit($event)\"\n                    (onChange)=\"onPagingChange.emit($event)\"\n                    (onRefresh)=\"onPagingRefresh.emit($event)\">\n                </tr>\n            </tfoot>\n        </table>\n        <ourpalm-table-setting *ngIf=\"openSettings\"\n                               [originalColumns]=\"originalColumns\"\n                               [columns]=\"columns\"\n                               (columnsChange)=\"columnsChange.emit($event);\"\n                               [openSettings]=\"openSettings\"\n                               (openSettingsChange)=\"openSettingsChange.emit($event)\">\n        </ourpalm-table-setting>\n    ",
                styles: [".fa-sort-asc { vertical-align: bottom; } .fa-sort-desc { vertical-align: top; } .sortable { cursor: pointer; } tr.row-selected { background-color: #ffdfff !important; /*background-color: #e4e3e3 !important;*/ } td span.page-left { float: left; text-align: left; width: 68%; } td span.page-left select { height: 20px; line-height: 20px; padding: 0; margin-top: -2px; max-width: 50px; display: inline-block; } td span.page-right { float: right; text-align: right; } /*  ourpalm-table-pager */ .ourpalm-table-pager { padding: 2px 4px; cursor: pointer; border: none; background-color: inherit; } .ourpalm-table-pager:enabled:hover { /*opacity: 0.8;*/ transform: scale(1.2, 1.2); } .ourpalm-table-pager:disabled { opacity: 0.5; cursor: default; } input[type=number] { text-align: center; height: 20px; line-height: 20px; padding: 0; margin-top: -2px; width: auto; max-width: 62px; min-width: 30px; display: inline-block; } .ourpalm-mask { position: fixed; width: 100%; height: 800%; top: 0; left: 0; background-color: #000000; opacity: 0.3; z-index: 2000; } .ourpalm-dialog { position: fixed; /*width: 30%;*/ /*height: 30%;*/ top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 2001; } .ourpalm-table-settings { max-width: 800px !important; min-width: 600px !important; } .ourpalm-table-settings .modal-body { text-align: left; } .ourpalm-table-settings .checkbox-inline { width: 25%; white-space: nowrap; /* 不换行 */ overflow: hidden; } .ourpalm-table-settings .checkbox-inline + .checkbox-inline { margin-left: 0; } .col-con { border: 1px solid #bbb; margin-bottom: 10px; } .col-con [type=text] { width: 100%; border: none; padding-top: 2px; padding-left: 10px; border-bottom: 1px solid #aaa; } .ourpalm-table-settings ul { list-style: none; height: 300px; overflow-y: auto; padding: 0; } .ourpalm-table-settings ul li { list-style: none !important; padding: 6px 10px; } .ourpalm-table-settings ul li:hover { background-color: antiquewhite; } .ourpalm-table-settings ul li label { margin-bottom: 0; font-weight: normal; } .ourpalm-table-settings ul li label span { width: 160px; display: inline-block; } li.gu-transit { list-style: none !important; background-color: antiquewhite; opacity: 0.7; border: 1px dashed #aaaaaa; } .gu-mirror { position: fixed !important; list-style: none !important; margin: 0 !important; z-index: 9999 !important; opacity: 0.8; -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=80)\"; filter: alpha(opacity=80); } .gu-hide { display: none !important; } .gu-unselectable { -webkit-user-select: none !important; -moz-user-select: none !important; -ms-user-select: none !important; user-select: none !important; } .ourpalm-table-pageing { background-color: #f9f9f9 !important; } table { margin-bottom: 0; } thead tr { background-color: #eceaea; } table tr td, table tr th { max-width: 400px !important; word-break: keep-all; /* 不换行 */ white-space: nowrap; /* 不换行 */ overflow: hidden; text-overflow: ellipsis; /*省略号*/ } /* settings */ .ourpalm-mask { position: fixed; width: 100%; height: 800%; top: 0; left: 0; background-color: #000000; opacity: 0.3; z-index: 2000; } .ourpalm-dialog { position: fixed; /*width: 30%;*/ /*height: 30%;*/ top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 2001; } .ourpalm-table-settings { max-width: 800px !important; min-width: 600px !important; } .ourpalm-table-settings .modal-body { text-align: left; } .ourpalm-table-settings .checkbox-inline { width: 25%; white-space: nowrap; /* 不换行 */ overflow: hidden; } .ourpalm-table-settings .checkbox-inline + .checkbox-inline { margin-left: 0; } .col-con { border: 1px solid #bbb; margin-bottom: 10px; } .col-con [type=text] { width: 100%; border: none; padding-top: 2px; padding-left: 10px; border-bottom: 1px solid #aaa; } .ourpalm-table-settings ul { list-style: none; height: 300px; overflow-y: auto; padding: 0; } .ourpalm-table-settings ul li { list-style: none !important; padding: 6px 10px; } .ourpalm-table-settings ul li:hover { background-color: antiquewhite; } .ourpalm-table-settings ul li label { margin-bottom: 0; font-weight: normal; } .ourpalm-table-settings ul li label span { width: 160px; display: inline-block; } li.gu-transit { list-style: none !important; background-color: antiquewhite; opacity: 0.7; border: 1px dashed #aaaaaa; } .gu-mirror { position: fixed !important; list-style: none !important; margin: 0 !important; z-index: 9999 !important; opacity: 0.8; -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=80)\"; filter: alpha(opacity=80); } .gu-hide { display: none !important; } .gu-unselectable { -webkit-user-select: none !important; -moz-user-select: none !important; -ms-user-select: none !important; user-select: none !important; }"]
            },] },
];
OurpalmTableWrapperComponent.ctorParameters = function () { return []; };
OurpalmTableWrapperComponent.propDecorators = {
    'tableClass': [{ type: Input },],
    'currentPage': [{ type: Input },],
    'pageSize': [{ type: Input },],
    'pagination': [{ type: Input },],
    'pageList': [{ type: Input },],
    'skipPage': [{ type: Input },],
    'pagePosition': [{ type: Input },],
    'showRefreshBtn': [{ type: Input },],
    'showSettingBtn': [{ type: Input },],
    'openSettings': [{ type: Input },],
    'openSettingsChange': [{ type: Output },],
    'onPagingChange': [{ type: Output },],
    'onPagingRefresh': [{ type: Output },],
    'currentPageChange': [{ type: Output },],
    'pageSizeChange': [{ type: Output },],
    'checkAll': [{ type: Input },],
    'cacheKey': [{ type: Input },],
    'cachePageSize': [{ type: Input },],
    'cacheColumns': [{ type: Input },],
    'singleSelect': [{ type: Input },],
    'checkOnSelect': [{ type: Input },],
    'selectOnCheck': [{ type: Input },],
    'ctrlSelect': [{ type: Input },],
    'rowMenus': [{ type: Input },],
    'rowView': [{ type: Input },],
    'rowViewTemplate': [{ type: Input },],
    'rowViewShowType': [{ type: Input },],
    'onClickRow': [{ type: Output },],
    'onDbClickRow': [{ type: Output },],
    'onClickCell': [{ type: Output },],
    'onDbClickCell': [{ type: Output },],
    'onRowCheckBoxChange': [{ type: Output },],
    'onHeaderCheckBoxChange': [{ type: Output },],
    'onSortColumn': [{ type: Output },],
    'total': [{ type: Input },],
    'rows': [{ type: Input },],
    'originalColumns': [{ type: Input },],
    'columnsChange': [{ type: Output },],
    '_columns': [{ type: Input, args: ['columns',] },],
};
//# sourceMappingURL=ourpalm-table-wrapper.component.js.map