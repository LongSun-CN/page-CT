import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Injectable, Input, Output, Pipe, ViewEncapsulation } from "@angular/core";
import { OurpalmTableColumn } from "../../model/ourpalm-table-column";
import { DragulaService } from "ng2-dragula";
var OurpalmTableSettingComponent = (function () {
    function OurpalmTableSettingComponent(dragulaService, changeDetectorRef) {
        this.dragulaService = dragulaService;
        this.changeDetectorRef = changeDetectorRef;
        this._columns = [];
        this.columnsChange = new EventEmitter();
        this.openSettingsChange = new EventEmitter();
        this.tempcolumns = [];
        this.lcolumns = [];
        this.rcolumns = [];
    }
    Object.defineProperty(OurpalmTableSettingComponent.prototype, "columns", {
        get: function () {
            return this._columns;
        },
        set: function (columns) {
            this._columns = columns;
            this.tempcolumns = columns.map(function (column) {
                return {
                    lchecked: false,
                    rchecked: false,
                    right: column.show,
                    column: new OurpalmTableColumn(column)
                };
            }).slice();
            this.lcolumns = this.tempcolumns.filter(function (col) { return !col.right; }).slice();
            this.rcolumns = this.tempcolumns.filter(function (col) { return col.right; }).slice();
        },
        enumerable: true,
        configurable: true
    });
    OurpalmTableSettingComponent.prototype.showColumns = function () {
        this.lcolumns.filter(function (col) { return col.lchecked; }).forEach(function (col) {
            col.right = true;
            col.lchecked = false;
            col.rchecked = false;
        });
        this.lcolumns = this.tempcolumns.filter(function (col) { return !col.right; }).slice();
        this.rcolumns = this.tempcolumns.filter(function (col) { return col.right; }).slice();
    };
    OurpalmTableSettingComponent.prototype.hideColumns = function () {
        this.rcolumns.filter(function (col) { return col.rchecked; }).forEach(function (col) {
            col.right = false;
            col.lchecked = false;
            col.rchecked = false;
        });
        this.lcolumns = this.tempcolumns.filter(function (col) { return !col.right; }).slice();
        this.rcolumns = this.tempcolumns.filter(function (col) { return col.right; }).slice();
    };
    OurpalmTableSettingComponent.prototype.resetColumns = function () {
        var _this = this;
        this.columns = this.originalColumns.map(function (col) {
            return Object.assign(_this._getOriginalColumn(col.field), col);
        });
        this.changeDetectorRef.markForCheck();
    };
    OurpalmTableSettingComponent.prototype.saveColumns = function () {
        var _this = this;
        var columns = this.lcolumns.concat(this.rcolumns).map(function (col) {
            col.column.show = col.right;
            return col.column;
        }).map(function (col) {
            return Object.assign(_this._getOriginalColumn(col.field), col);
        });
        this.columnsChange.emit(columns);
        this.closeSettings();
    };
    OurpalmTableSettingComponent.prototype.closeSettings = function () {
        this.openSettings = false;
        this.openSettingsChange.emit(false);
    };
    OurpalmTableSettingComponent.prototype.ngOnDestroy = function () {
        this.dragulaService.destroy('setting-columns');
    };
    OurpalmTableSettingComponent.prototype._getOriginalColumn = function (field) {
        for (var i = 0; i < this.columns.length; i++) {
            var column = this.columns[i];
            if (column.field === field) {
                return column;
            }
        }
    };
    return OurpalmTableSettingComponent;
}());
export { OurpalmTableSettingComponent };
OurpalmTableSettingComponent.decorators = [
    { type: Component, args: [{
                selector: 'ourpalm-table-setting',
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                template: "\n        <div>\n            <div class=\"ourpalm-mask\"></div>\n            <div class=\"ourpalm-dialog\">\n                <div class=\"modal-content ourpalm-table-settings\">\n                    <div class=\"modal-header\">\n                        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"\n                                (click)=\"closeSettings()\">\n                            <span aria-hidden=\"true\">&times;</span></button>\n                        <h4 class=\"modal-title\">\u81EA\u5B9A\u4E49\u5217\u8868\u9879</h4>\n                    </div>\n                    <div class=\"modal-body\">\n                        <div class=\"row\">\n                            <div class=\"col-md-5\">\n                                <span>\u5907\u9009\u5217</span>\n                                <div class=\"col-con\">\n                                    <input type=\"text\" placeholder=\"\u8F93\u5165\u503C...\" [(ngModel)]=\"lmodel\">\n                                    <ul>\n                                        <li *ngFor=\"let col of lcolumns | lcolumnFilter:lmodel\">\n                                            <label>\n                                                <input type=\"checkbox\" [(ngModel)]=\"col.lchecked\">\n                                                <span>{{col.column.header}}</span>\n                                            </label>\n                                        </li>\n                                    </ul>\n                                </div>\n                            </div>\n                            <div class=\"col-md-2\" style=\"padding:0px;margin:0px;text-align:center;\">\n                                <div style=\"margin-top:130px;margin-bottom:10px;\">\n                                    <button type=\"button\" class=\"btn btn-default btn-sm\" (click)=\"showColumns()\">\n                                        <i class=\"glyphicon glyphicon-arrow-right\"></i>\n                                    </button>\n                                </div>\n                                <button type=\"button\" class=\"btn btn-default btn-sm\" (click)=\"hideColumns()\">\n                                    <i class=\"glyphicon glyphicon-arrow-left\"></i>\n                                </button>\n                            </div>\n                            <div class=\"col-md-5\">\n                                <span>\u5DF2\u9009\u5217</span>\n                                <div class=\"col-con\">\n                                    <input type=\"text\" placeholder=\"\u8F93\u5165\u503C...\" [(ngModel)]=\"rmodel\">\n                                    <ul [dragula]=\"'setting-columns'\" [dragulaModel]=\"rcolumns\">\n                                        <li *ngFor=\"let col of rcolumns | rcolumnFilter:rmodel; let i = index;\">\n                                            <label>\n                                                <input type=\"checkbox\" [(ngModel)]=\"col.rchecked\">\n                                                <span>{{col.column.header}}</span>\n                                            </label>\n                                        </li>\n                                    </ul>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"row\">\n                            <div class=\"col-md-12\">\n                                <div class=\"btn-group btn-group-sm\" style=\"float:right;\">\n                                    <button type=\"button\" class=\"btn btn-default\" (click)=\"resetColumns()\">\u8FD8\u539F</button>\n                                    <button type=\"button\" class=\"btn btn-default\" (click)=\"saveColumns()\">\u4FDD\u5B58</button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    "
            },] },
];
OurpalmTableSettingComponent.ctorParameters = function () { return [
    { type: DragulaService, },
    { type: ChangeDetectorRef, },
]; };
OurpalmTableSettingComponent.propDecorators = {
    'originalColumns': [{ type: Input },],
    'columnsChange': [{ type: Output },],
    'openSettings': [{ type: Input },],
    'openSettingsChange': [{ type: Output },],
    'columns': [{ type: Input },],
};
var ColumnSettingsLeftFilter = (function () {
    function ColumnSettingsLeftFilter() {
    }
    ColumnSettingsLeftFilter.prototype.transform = function (columns, name) {
        return !name ? columns : columns.filter(function (column) { return column.column.header.includes(name); });
    };
    return ColumnSettingsLeftFilter;
}());
export { ColumnSettingsLeftFilter };
ColumnSettingsLeftFilter.decorators = [
    { type: Pipe, args: [{
                name: 'lcolumnFilter',
                pure: true
            },] },
    { type: Injectable },
];
ColumnSettingsLeftFilter.ctorParameters = function () { return []; };
var ColumnSettingsRightFilter = (function () {
    function ColumnSettingsRightFilter() {
    }
    ColumnSettingsRightFilter.prototype.transform = function (columns, name) {
        return name ? columns.filter(function (column) { return column.column.header.includes(name); }) : columns;
    };
    return ColumnSettingsRightFilter;
}());
export { ColumnSettingsRightFilter };
ColumnSettingsRightFilter.decorators = [
    { type: Pipe, args: [{
                name: 'rcolumnFilter',
                pure: true
            },] },
    { type: Injectable },
];
ColumnSettingsRightFilter.ctorParameters = function () { return []; };
//# sourceMappingURL=ourpalm-table-footer-setting.component.js.map