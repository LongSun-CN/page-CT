import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation } from "@angular/core";
var OurpalmTablePagingComponent = (function () {
    function OurpalmTablePagingComponent() {
        this._currentPage = 1;
        this._pageSize = 10;
        this._total = 0;
        this._firstPage = 1;
        this._lastPage = 0;
        this._start = 0;
        this._end = 0;
        this._rows = 0;
        this.pageList = [10, 20, 30, 40, 50];
        this.skipPage = true;
        this.showRefreshBtn = true;
        this.onChange = new EventEmitter();
        this.onRefresh = new EventEmitter();
        this.currentPageChange = new EventEmitter();
        this.pageSizeChange = new EventEmitter();
        this.showSettingBtn = true;
        this.openSettings = false;
        this.openSettingsChange = new EventEmitter();
    }
    Object.defineProperty(OurpalmTablePagingComponent.prototype, "currentPage", {
        get: function () {
            return this._currentPage;
        },
        set: function (value) {
            if (this._currentPage == value) {
                return;
            }
            if (value > this._lastPage || value < this._firstPage) {
                return;
            }
            this._currentPage = Number(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OurpalmTablePagingComponent.prototype, "pageSize", {
        get: function () {
            return this._pageSize;
        },
        set: function (value) {
            if (this._pageSize == value) {
                return;
            }
            if (value <= 0) {
                return;
            }
            this._pageSize = Number(value);
            this._buildPages();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OurpalmTablePagingComponent.prototype, "total", {
        get: function () {
            return this._total;
        },
        set: function (value) {
            if (this._total == value) {
                return;
            }
            this._total = Number(value);
            this._buildPages();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OurpalmTablePagingComponent.prototype, "rows", {
        get: function () {
            return this._rows;
        },
        set: function (rows) {
            this._rows = rows;
            this._buildPages();
        },
        enumerable: true,
        configurable: true
    });
    OurpalmTablePagingComponent.prototype._buildPages = function () {
        this._lastPage = Math.ceil(this._total / this._pageSize);
        if (this._rows > 0) {
            this._start = (this._currentPage - 1) * this._pageSize + 1;
            this._end = this._start + this.rows - 1;
        }
        else {
            this._start = 0;
            this._end = 0;
        }
    };
    OurpalmTablePagingComponent.prototype._jumpPage = function (index) {
        if (index < this._firstPage) {
            this.currentPage = this._firstPage;
        }
        else if (index > this._lastPage) {
            this.currentPage = this._lastPage;
        }
        else {
            this.currentPage = index;
        }
        this._buildPages();
        this.currentPageChange.emit(this._currentPage);
        this.onChange.emit();
    };
    OurpalmTablePagingComponent.prototype._changePageSize = function () {
        if (this.currentPage != this._firstPage) {
            this.currentPage = this._firstPage;
            this.currentPageChange.emit(this._firstPage);
        }
        this._buildPages();
        this.pageSizeChange.emit(Number(this._pageSize));
        this.onChange.emit();
    };
    OurpalmTablePagingComponent.prototype._changeCurrentPage = function (index) {
        this.currentPage = index;
        this.currentPageChange.emit(this._currentPage);
        this.onChange.emit();
    };
    return OurpalmTablePagingComponent;
}());
export { OurpalmTablePagingComponent };
OurpalmTablePagingComponent.decorators = [
    { type: Component, args: [{
                selector: '[ourpalm-table-paging]',
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                template: "\n        <td colspan=\"100000\">\n            <span class=\"page-left\">\n                <select class=\"form-control input-sm\"\n                        [(ngModel)]=\"_pageSize\"\n                        (change)=\"_changePageSize()\">\n                    <option *ngFor=\"let val of pageList\" [value]=\"val\">{{val}}</option>\n                </select>\n                <button class=\"glyphicon glyphicon-step-backward ourpalm-table-pager\"\n                        (click)=\"_jumpPage(_firstPage)\"\n                        [disabled]=\"_currentPage <= 1\">\n                </button>\n                <button class=\"glyphicon glyphicon-backward ourpalm-table-pager\"\n                        (click)=\"_jumpPage(_currentPage - 1)\"\n                        [disabled]=\"_currentPage <= 1\">\n                </button>\n                \u7B2C\n                <input type=\"number\" min=\"1\" max=\"{{_lastPage}}\"\n                       [readonly]=\"!skipPage\"\n                       [ngModel]=\"currentPage\"\n                       (ngModelChange)=\"_changeCurrentPage($event)\"\n                       class=\"form-control input-sm\"/>\n                \u9875,\u5171{{_lastPage}}\u9875\n                <button class=\"glyphicon glyphicon-forward ourpalm-table-pager\"\n                        (click)=\"_jumpPage(_currentPage + 1)\"\n                        [disabled]=\"_currentPage == _lastPage || _lastPage == 0\">\n                </button>\n                <button class=\"glyphicon glyphicon-step-forward ourpalm-table-pager\"\n                        (click)=\"_jumpPage(_lastPage)\"\n                        [disabled]=\"_currentPage == _lastPage || _lastPage == 0\">\n                </button>\n                <button *ngIf=\"showRefreshBtn\" class=\"glyphicon glyphicon-refresh ourpalm-table-pager\"\n                        (click)=\"onRefresh.emit(_currentPage)\">\n                </button>\n                <button *ngIf=\"showSettingBtn\" class=\"glyphicon glyphicon-cog ourpalm-table-pager\"\n                        (click)=\"openSettingsChange.emit(true)\"></button>\n            </span>\n            <span class=\"page-right\">\u663E\u793A{{_start}}-{{_end}}\u6761\u8BB0\u5F55,\u5171{{_total}}\u6761\u8BB0\u5F55</span>\n        </td>\n    "
            },] },
];
OurpalmTablePagingComponent.ctorParameters = function () { return []; };
OurpalmTablePagingComponent.propDecorators = {
    'pageList': [{ type: Input },],
    'skipPage': [{ type: Input },],
    'showRefreshBtn': [{ type: Input },],
    'onChange': [{ type: Output },],
    'onRefresh': [{ type: Output },],
    'currentPageChange': [{ type: Output },],
    'pageSizeChange': [{ type: Output },],
    'showSettingBtn': [{ type: Input },],
    'openSettings': [{ type: Input },],
    'openSettingsChange': [{ type: Output },],
    'currentPage': [{ type: Input },],
    'pageSize': [{ type: Input },],
    'total': [{ type: Input },],
    'rows': [{ type: Input },],
};
//# sourceMappingURL=ourpalm-table-footer-paging.component.js.map