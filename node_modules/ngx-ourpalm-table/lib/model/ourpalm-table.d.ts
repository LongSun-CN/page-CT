import { OurpalmTableColumn } from "./ourpalm-table-column";
import { TemplateRef } from "@angular/core";
import { ContextMenu } from "glowworm/lib/context-menu";
import { OurpalmTableRow } from "./ourpalm-table-row";
export interface Page {
    currentPage?: number;
    pageSize?: number;
    total: number;
    rows: any[];
}
export declare type RowViewShowType = 'rowView' | 'column' | 'both';
export interface RowView {
    renderRow(rowIndex: number, rowData: any): string;
}
export declare class OurpalmTable {
    originalColumns?: OurpalmTableColumn[];
    tableClass: string;
    checkAllRows: boolean;
    autoLoadData?: boolean;
    columns?: OurpalmTableColumn[];
    pagination?: boolean;
    singleSelect?: boolean;
    serverSort?: boolean;
    multiSort?: boolean;
    pageList?: number[];
    skipPage?: boolean;
    cacheKey?: string;
    cachePageSize?: boolean;
    cacheColumns?: boolean;
    pagePosition?: 'bottom' | 'top' | 'both';
    showRefreshBtn?: boolean;
    showSettingBtn?: boolean;
    checkOnSelect?: boolean;
    selectOnCheck?: boolean;
    ctrlSelect?: boolean;
    rowMenus: ContextMenu[];
    rowView?: RowView;
    rowViewTemplate?: TemplateRef<any>;
    rowViewShowType: RowViewShowType;
    loadData: (table: OurpalmTable, callback: (page: Page) => void) => {};
    onClickRow: (rowIndex: number, rowData: any) => {};
    onDbClickRow: (rowIndex: number, rowData: any) => {};
    onClickCell: (rowIndex: number, cellIndex: number, rowData: any, column: OurpalmTableColumn) => {};
    onDbClickCell: (rowIndex: number, cellIndex: number, rowData: any, column: OurpalmTableColumn) => {};
    onHeaderCheckBoxChange: () => void;
    onRowCheckBoxChange: (rowData, rowIndex) => void;
    trackByFun: (rowIndex, rowData) => string;
    openSettings: boolean;
    total: number;
    _rows: any[];
    _currentPage: number;
    _pageSize: number;
    tableRows: OurpalmTableRow[];
    constructor(table?: OurpalmTable | any);
    onLoadSuccess(_page: Page): void;
    rows: any[];
    currentPage: number;
    pageSize: number;
    readonly allPage: number;
    readonly start: number;
    readonly end: number;
    getOptions(): {
        currentPage: number;
        pageSize: number;
        pagination: boolean;
        singleSelect: boolean;
        serverSort: boolean;
        pageList: any[];
        skipPage: boolean;
        cacheKey: string;
        cachePageSize: boolean;
        cacheColumns: boolean;
        pagePosition: "bottom" | "top" | "both";
    };
    getDisplayedColumns(): any[];
    getDisplayedRows(): any[];
    getSelectedRows(): any[];
    getCheckedRows(): any[];
    getSortColumns(): OurpalmTableColumn[];
    changeColumns(columns: OurpalmTableColumn[], localStorageType?: 'read' | 'write' | ''): void;
    changePageSize(pageSize: number): void;
    firstPage(): void;
    prePage(): void;
    nextPage(): void;
    lastPage(): void;
    refresh(): void;
    gotoSkipPage(page: number): void;
    setPageData(page: Page): void;
    setOptions(table: OurpalmTable | any): void;
    checkAll(): void;
    uncheckAll(): void;
    checkRow(index: number): void;
    uncheckRow(index: number): void;
    openSetting(): void;
    invokeLoadData(): void;
    private _reloadCachePageSize();
}
