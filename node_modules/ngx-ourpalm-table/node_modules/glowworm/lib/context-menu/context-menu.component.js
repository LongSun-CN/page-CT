import { Component, forwardRef, Inject, NgZone, Renderer2 } from "@angular/core";
import { ContextMenu } from "./context-menu";
import { ContextMenuService } from "./context-menu.service";
var GwContextMenuContainerComponent = (function () {
    function GwContextMenuContainerComponent(ngZone, renderer, service) {
        this.ngZone = ngZone;
        this.renderer = renderer;
        this.service = service;
        this.hidden = true;
    }
    GwContextMenuContainerComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.menuSubscribe = this.service.show.subscribe(function (clickEvent) {
            _this.menus = _this._deepCloneMenus(clickEvent.menus);
            _this.hidden = false;
            _this.styler = {
                zIndex: 2000,
                display: 'block',
                position: 'absolute',
                left: clickEvent.event.pageX + "px",
                top: clickEvent.event.pageY + "px"
            };
            _this.class = clickEvent.class;
        });
        this.ngZone.runOutsideAngular(function () {
            _this._clickFun = _this.renderer.listen(document, 'click', _this.clickedOutside.bind(_this));
            _this._menuFun = _this.renderer.listen(document, 'contextmenu', _this.clickedOutside.bind(_this));
        });
    };
    GwContextMenuContainerComponent.prototype.ngOnDestroy = function () {
        this.menuSubscribe && this.menuSubscribe.unsubscribe();
        this._clickFun && this._clickFun();
        this._menuFun && this._menuFun();
    };
    GwContextMenuContainerComponent.prototype.clickedOutside = function (event) {
        var _this = this;
        if (!this.hidden) {
            this.ngZone.run(function () {
                _this.hide();
            });
        }
    };
    GwContextMenuContainerComponent.prototype.hide = function () {
        this.hidden = true;
        this.styler = {
            display: 'none'
        };
    };
    GwContextMenuContainerComponent.prototype._onClickMenu = function (menu) {
        this.hide();
        if (!this._disabledMenus(menu)) {
            menu.onclick && menu.onclick();
        }
    };
    GwContextMenuContainerComponent.prototype._showMenus = function (menus) {
        var _this = this;
        return menus && menus.filter(function (menu) { return !menu.separator; }).filter(function (menu) { return _this._showMenu(menu); }).length > 0;
    };
    GwContextMenuContainerComponent.prototype._showMenu = function (menu) {
        if (typeof menu.show == "function") {
            return menu.show();
        }
        return menu.show;
    };
    GwContextMenuContainerComponent.prototype._disabledMenus = function (menu) {
        if (typeof menu.disabled == "function") {
            return menu.disabled();
        }
        return menu.disabled;
    };
    GwContextMenuContainerComponent.prototype._deepCloneMenus = function (menus) {
        if (!menus)
            return;
        function deepCloneMenu(menu) {
            if (menu.submenus) {
                menu.submenus = menu.submenus.map(function (submenu) { return deepCloneMenu(submenu); });
            }
            return new ContextMenu(menu);
        }
        return menus.map(function (menu) { return deepCloneMenu(menu); });
    };
    return GwContextMenuContainerComponent;
}());
export { GwContextMenuContainerComponent };
GwContextMenuContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'contextmenu-container',
                styles: [".dropdown-menu { background-color: #545f70; } .dropdown-menu li a { color: #fff !important; } ul li a:hover { background-color: #657287 !important; } /** 多级菜单样式开始 */ .dropdown-submenu { position: relative; } .dropdown-submenu > .dropdown-menu { top: 0; left: 100%; margin-top: -6px; margin-left: -1px; -webkit-border-radius: 0 6px 6px 6px; -moz-border-radius: 0 6px 6px; border-radius: 0 6px 6px 6px; } .dropdown-submenu:hover > .dropdown-menu { display: block; } .dropdown-submenu > a:after { display: block; content: \" \"; float: right; width: 0; height: 0; border-color: transparent; border-style: solid; border-width: 5px 0 5px 5px; border-left-color: #ccc; margin-top: 5px; margin-right: -10px; } .dropdown-submenu:hover > a:after { border-left-color: #1d1d1d; } .dropdown-submenu.pull-left { float: none; } .dropdown-submenu.pull-left > .dropdown-menu { left: -100%; margin-left: 10px; -webkit-border-radius: 6px 0 6px 6px; -moz-border-radius: 6px 0 6px 6px; border-radius: 6px 0 6px 6px; } .dropdown-menu > li > a { padding: 3px 20px 3px 10px; } /** 多级菜单样式 结束 */ .row-context-menu { display: none; } .row-context-menu > .dropdown-menu { display: block; } .row-context-menu .empty-icon { display: inline-block; width: 23px; } .row-context-menu li a.disabled { color: #aaa !important; cursor: not-allowed; text-decoration: line-through; } "],
                template: "\n        <ng-template #menusTpl let-menus>\n            <ul class=\"dropdown-menu\" *ngIf=\"_showMenus(menus)\">\n                <ng-container *ngFor=\"let menu of menus\">\n                    <ng-container *ngIf=\"menu.separator\">\n                        <li class=\"divider\" [class.hidden]=\"!_showMenu(menu)\"></li>\n                    </ng-container>\n                    <ng-container *ngIf=\"!menu.separator && !menu.submenus\">\n                        <li (click)=\"_onClickMenu(menu)\" [class.hidden]=\"!_showMenu(menu)\">\n                            <a [class.disabled]=\"_disabledMenus(menu)\">\n                                <i [ngClass]=\"menu.iconCls || 'empty-icon'\"></i>{{ menu.text }}\n                            </a>\n                        </li>\n                    </ng-container>\n                    <ng-container *ngIf=\"menu.submenus\">\n                        <li class=\"dropdown-submenu\" [class.hidden]=\"!_showMenu(menu)\">\n                            <a tabindex=\"-1\"><i [ngClass]=\"menu.iconCls || 'empty-icon'\"></i>{{ menu.text }}</a>\n                            <ng-container *ngTemplateOutlet=\"menusTpl;context:{$implicit: menu.submenus}\">\n                            </ng-container>\n                        </li>\n                    </ng-container>\n                </ng-container>\n            </ul>\n        </ng-template>\n\n        <div class=\"row-context-menu\" *ngIf=\"menus\" [ngStyle]=\"styler\" [ngClass]=\"class\">\n            <ng-container *ngTemplateOutlet=\"menusTpl; context:{ $implicit: menus }\"></ng-container>\n        </div>\n    "
            },] },
];
GwContextMenuContainerComponent.ctorParameters = function () { return [
    { type: NgZone, },
    { type: Renderer2, },
    { type: ContextMenuService, decorators: [{ type: Inject, args: [forwardRef(function () { return ContextMenuService; }),] },] },
]; };
//# sourceMappingURL=context-menu.component.js.map