import { Component, ContentChildren, EventEmitter, Input, Output, ViewEncapsulation } from "@angular/core";
import { DragulaService } from "ng2-dragula";
import { GwTabComponent } from "./tab.component";
import { typeofTemplateInput } from "../utils/template-input";
import "rxjs/add/operator/first";
var dragulaId = 0;
var GwTabsComponent = (function () {
    function GwTabsComponent(dragulaService) {
        var _this = this;
        this.dragulaService = dragulaService;
        this.position = 'top';
        this.sortable = false;
        this.onClose = new EventEmitter();
        this.onSelect = new EventEmitter();
        this.onUnSelect = new EventEmitter();
        this.onAdd = new EventEmitter();
        this.onSort = new EventEmitter();
        this.onOrderChange = new EventEmitter();
        this._tabs = [];
        this._dragula_key = "gwtabs_" + ++dragulaId;
        this._store_prefix = 'gwtabs_';
        dragulaService.drop.subscribe(function (value) {
            _this.onSort.emit();
            _this._onOrderChangeEvent();
        });
    }
    GwTabsComponent.prototype.ngAfterViewInit = function () {
        var comps = this.tabComponents.toArray();
        (_a = this._tabs).push.apply(_a, comps);
        var selected = this._tabs.filter(function (tab) { return tab.selected; });
        if (selected.length == 0) {
            if (this._tabs.length > 0) {
                var first = this._tabs[0];
                first.selected = true;
            }
        }
        if (selected.length > 1) {
            selected.forEach(function (tab, index) {
                if (index != 0) {
                    tab.selected = false;
                }
            });
        }
        if (this.storeKey && this.storeType == 'local' && window.localStorage) {
            var json = window.localStorage.getItem("" + this._store_prefix + this.storeKey);
            if (json) {
                var arr = JSON.parse(json);
                this.sortTabs(arr);
            }
        }
        var _a;
    };
    GwTabsComponent.prototype.addTab = function (tab) {
        var _this = this;
        if (tab.selected) {
            this._tabs.forEach(function (tab) {
                if (tab.selected) {
                    tab.selected = false;
                    _this.onUnSelect.emit(tab);
                }
            });
            this._tabs.push(tab);
            this.onAdd.emit(tab);
            tab.selected = true;
            this.onSelect.emit(tab);
        }
        else {
            this._tabs.push(tab);
            this.onAdd.emit(tab);
        }
        this._onOrderChangeEvent();
    };
    GwTabsComponent.prototype.insertTab = function (index, tab) {
        var _this = this;
        if (tab.selected) {
            this._tabs.forEach(function (tab) {
                if (tab.selected) {
                    tab.selected = false;
                    _this.onUnSelect.emit(tab);
                }
            });
            this._tabs.splice(index, 0, tab);
            this.onAdd.emit(tab);
            tab.selected = true;
            this.onSelect.emit(tab);
        }
        else {
            this._tabs.splice(index, 0, tab);
            this.onAdd.emit(tab);
        }
        this._onOrderChangeEvent();
    };
    GwTabsComponent.prototype.disabledTab = function (tabId) {
        this._tabs.forEach(function (tab) {
            if (tab.tabId == tabId) {
                tab.disabled = true;
            }
        });
    };
    GwTabsComponent.prototype.enabledTab = function (tabId) {
        this._tabs.forEach(function (tab) {
            if (tab.tabId == tabId) {
                tab.disabled = false;
            }
        });
    };
    GwTabsComponent.prototype.selectTab = function (tabId) {
        var _this = this;
        this._tabs.forEach(function (tab) {
            if (tab.tabId == tabId) {
                _this._selectTab(tab);
            }
        });
    };
    GwTabsComponent.prototype.closeTab = function (tabId) {
        var _this = this;
        this._tabs.forEach(function (tab) {
            if (tab.tabId == tabId) {
                _this._closeTab(tab);
            }
        });
        this._onOrderChangeEvent();
    };
    GwTabsComponent.prototype.getSelected = function () {
        var selected = this._tabs.filter(function (tab) { return tab.selected; });
        return selected.length > 0 ? selected[0] : null;
    };
    GwTabsComponent.prototype.sortTabs = function (orders) {
        var _this = this;
        if (orders.length != this._tabs.length)
            return;
        var dist = [];
        orders.forEach(function (_tab) {
            for (var i = 0; i < _this._tabs.length; i++) {
                var tab = _this._tabs[i];
                if (_tab.tabId == tab.tabId) {
                    dist.push(tab);
                    break;
                }
            }
        });
        if (dist.length != this._tabs.length)
            return;
        this._tabs = dist;
    };
    GwTabsComponent.prototype._typeofContent = function (content) {
        return typeofTemplateInput(content);
    };
    GwTabsComponent.prototype._selectTab = function (tab) {
        var selected = this._tabs.filter(function (tab) { return tab.selected; })[0];
        if (tab == selected || tab.disabled) {
            return;
        }
        selected.selected = false;
        this.onUnSelect.emit(selected);
        tab.isFirstSelected = false;
        tab.selected = true;
        this.onSelect.emit(tab);
    };
    GwTabsComponent.prototype._closeTab = function (tab, event) {
        var _this = this;
        event && event.stopPropagation();
        var indexOf = this._tabs.indexOf(tab);
        if (tab.selected) {
            var subscribeFn = function (closed) {
                if (closed) {
                    _this._tabs.splice(indexOf, 1);
                    _this.onClose.emit(tab);
                    var filtered = _this._tabs.filter(function (tab) { return !tab.disabled; });
                    if (filtered.length > 0) {
                        var firstTab = filtered[0];
                        firstTab.selected = true;
                        _this.onSelect.emit(firstTab);
                    }
                }
            };
            this.onUnSelect.emit(tab);
            this.onClosing ? this.onClosing(tab).first().subscribe(subscribeFn) : subscribeFn(true);
        }
        else {
            var subscribeFn = function (closed) {
                if (closed) {
                    _this._tabs.splice(indexOf, 1);
                    _this.onClose.emit(tab);
                }
            };
            this.onClosing ? this.onClosing(tab).first().subscribe(subscribeFn) : subscribeFn(true);
        }
    };
    GwTabsComponent.prototype._onOrderChangeEvent = function () {
        var tabIds = this._tabs.map(function (tab) {
            return { tabId: tab.tabId };
        });
        if (this.storeKey && this.storeType == 'local' && window.localStorage) {
            var json = JSON.stringify(tabIds);
            window.localStorage.setItem("" + this._store_prefix + this.storeKey, json);
        }
        this.onOrderChange.emit(tabIds);
    };
    GwTabsComponent.prototype.ngOnDestroy = function () {
        if (this.sortable) {
            this.dragulaService.destroy(this._dragula_key);
        }
    };
    return GwTabsComponent;
}());
export { GwTabsComponent };
GwTabsComponent.decorators = [
    { type: Component, args: [{
                selector: 'gw-tabs',
                template: "\n        <div class=\"nav-tabs-custom tabs-{{position}}\">\n            <ng-template #tabs_header>\n                <ng-container *ngFor=\"let tab of _tabs\">\n                    <li [class.active]=\"tab.selected\"\n                        [class.disabled]=\"tab.disabled\">\n                        <a [class.disabled]=\"tab.disabled\" (click)=\"_selectTab(tab)\">\n                            <ng-container *ngIf=\"_typeofContent(tab.title) === 'string'\">\n                                {{tab.title}}\n                            </ng-container>\n                            <ng-container *ngIf=\"_typeofContent(tab.title) === 'template'\">\n                                <ng-template [ngTemplateOutlet]=\"tab.title\"></ng-template>\n                            </ng-container>\n                            <ng-container *ngIf=\"_typeofContent(tab.title) === 'component'\">\n                                <ng-container *ngComponentOutlet=\"tab.title\"></ng-container>\n                            </ng-container>\n                            <span *ngIf=\"tab.closable\" (click)=\"_closeTab(tab, $event)\"\n                                  class=\"glyphicon glyphicon-remove-circle\">\n                            </span>\n                        </a>\n                    </li>\n                </ng-container>\n            </ng-template>\n            <ng-container *ngIf=\"sortable\">\n                <ul class=\"nav nav-tabs\"\n                    [dragula]=\"_dragula_key\"\n                    [dragulaModel]=\"_tabs\">\n                    <ng-template [ngTemplateOutlet]=\"tabs_header\"></ng-template>\n                </ul>\n            </ng-container>\n            <ng-container *ngIf=\"!sortable\">\n                <ul class=\"nav nav-tabs\">\n                    <ng-template [ngTemplateOutlet]=\"tabs_header\"></ng-template>\n                </ul>\n            </ng-container>\n            <div class=\"tab-content no-padding\">\n                <ng-container *ngFor=\"let tab of _tabs\">\n                    <div class=\"tab-pane\" [class.active]=\"tab.selected\">\n                        <ng-container *ngIf=\"!tab.lazy || !tab.isFirstSelected\">\n                            <ng-container *ngIf=\"_typeofContent(tab.content) === 'string'\">\n                                {{tab.content}}\n                            </ng-container>\n                            <ng-container *ngIf=\"_typeofContent(tab.content) === 'template'\">\n                                <ng-template [ngTemplateOutlet]=\"tab.content\"></ng-template>\n                            </ng-container>\n                            <ng-container *ngIf=\"_typeofContent(tab.content) === 'component'\">\n                                <ng-container *ngComponentOutlet=\"tab.content\"></ng-container>\n                            </ng-container>\n                        </ng-container>\n                    </div>\n                </ng-container>\n            </div>\n        </div>\n    ",
                encapsulation: ViewEncapsulation.None,
                styles: ["/** * 全局css */ .hidden { display: none !important; } /** * overlay css */ .gw-overlay { position: absolute; z-index: 10; } /** * popconfirm css */ .gw-popconfirm { font-size: 12px; border-radius: 4px; min-width: 150px; box-shadow: 0 1px 6px rgba(0, 0, 0, .2); } .gw-popconfirm .gw-popconfirm-title { padding: 6px; border-bottom: 1px solid #aaa; } .gw-popconfirm .gw-popconfirm-footer { padding: 6px; text-align: right; } /** * popinput css */ .gw-popinput { font-size: 12px; border-radius: 4px; min-width: 150px; box-shadow: 0 1px 6px rgba(0, 0, 0, .2); } .gw-popinput .gw-popinput-title, .gw-popinput .gw-popinput-body { padding: 6px; border-bottom: 1px solid #aaa; } .gw-popinput .gw-popinput-body input { width: 100%; } .gw-popinput .gw-popinput-footer { padding: 6px; text-align: right; } /** * confirm css */ .gw-confirm-mask { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: #aaaaaa; opacity: 0.3; z-index: 10000; } .gw-confirm { position: fixed; top: 50%; left: 50%; opacity: 1; transform: translate(-50%, -50%); z-index: 10001; background-color: #ffffff; border-radius: 4px; min-width: 200px; padding: 6px; } .gw-confirm .gw-confirm-title { font-weight: bold; } .gw-confirm .gw-confirm-footer { text-align: right; } /** * popselect css */ .gw-popselect { font-size: 12px; } .gw-popselect .gw-popselect-filter { margin: 10px; } .gw-popselect .gw-popselect-filter input { border: 1px solid #cccccc; width: 100%; padding-left: 5px; padding-top: 3px; } .gw-popselect .gw-popselect-body { border-bottom: 1px solid #aaa; padding: 0 0 10px 0; } .gw-popselect .gw-popselect-body ul { list-style: none; padding: 0; margin: 0; max-height: 220px; overflow: auto; } .gw-popselect .gw-popselect-body ul li { padding: 0 10px; } .gw-popselect .gw-popselect-body ul li:hover { background-color: antiquewhite; } .gw-popselect .gw-popselect-body label { width: 100%; font-weight: normal; margin: 2px 0; } .gw-popselect .gw-popselect-body input { height: 11px; } .gw-popselect .gw-popselect-footer { text-align: right; margin: 5px 10px; }",
"li.gu-transit { list-style: none !important; background-color: antiquewhite; opacity: 0.7; border: 1px dashed #aaaaaa; } .gu-mirror { text-align: center !important; line-height: 40px !important; border: 1px dashed #aaaaaa; position: fixed !important; background-color: aliceblue; list-style: none !important; margin: 0 !important; z-index: 9999 !important; opacity: 0.8; filter: alpha(opacity=80); } .gu-hide { display: none !important; } .gu-unselectable { -webkit-user-select: none !important; -moz-user-select: none !important; -ms-user-select: none !important; user-select: none !important; }"],
            },] },
];
GwTabsComponent.ctorParameters = function () { return [
    { type: DragulaService, },
]; };
GwTabsComponent.propDecorators = {
    'storeKey': [{ type: Input },],
    'storeType': [{ type: Input },],
    'position': [{ type: Input },],
    'sortable': [{ type: Input },],
    'onClosing': [{ type: Input },],
    'onClose': [{ type: Output },],
    'onSelect': [{ type: Output },],
    'onUnSelect': [{ type: Output },],
    'onAdd': [{ type: Output },],
    'onSort': [{ type: Output },],
    'onOrderChange': [{ type: Output },],
    'tabComponents': [{ type: ContentChildren, args: [GwTabComponent,] },],
};
//# sourceMappingURL=tabs.component.js.map