import { AfterViewInit, EventEmitter, OnDestroy, QueryList } from "@angular/core";
import { DragulaService } from "ng2-dragula";
import { GwTabComponent } from "./tab.component";
import { GwTab } from "./tab";
import { Observable } from "rxjs/Observable";
import "rxjs/add/operator/first";
export declare type TabOrTabComponent = GwTab | GwTabComponent;
export declare class GwTabsComponent implements AfterViewInit, OnDestroy {
    private dragulaService;
    storeKey: string;
    storeType: 'local' | 'remote';
    position: 'top' | 'bottom' | 'left' | 'right';
    sortable: boolean;
    onClosing: (tab: TabOrTabComponent) => Observable<boolean>;
    onClose: EventEmitter<TabOrTabComponent>;
    onSelect: EventEmitter<TabOrTabComponent>;
    onUnSelect: EventEmitter<TabOrTabComponent>;
    onAdd: EventEmitter<TabOrTabComponent>;
    onSort: EventEmitter<void>;
    onOrderChange: EventEmitter<{
        tabId: any;
    }[]>;
    tabComponents: QueryList<GwTabComponent>;
    _tabs: TabOrTabComponent[];
    _dragula_key: string;
    _store_prefix: string;
    constructor(dragulaService: DragulaService);
    ngAfterViewInit(): void;
    addTab(tab: TabOrTabComponent): void;
    insertTab(index: number, tab: TabOrTabComponent): void;
    disabledTab(tabId: any): void;
    enabledTab(tabId: any): void;
    selectTab(tabId: any): void;
    closeTab(tabId: any): void;
    getSelected(): TabOrTabComponent;
    sortTabs(orders: {
        tabId: any;
    }[]): void;
    _typeofContent(content: string): string;
    _selectTab(tab: TabOrTabComponent): void;
    _closeTab(tab: TabOrTabComponent, event?: Event): void;
    _onOrderChangeEvent(): void;
    ngOnDestroy(): void;
}
